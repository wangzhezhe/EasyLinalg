import numpy as np 
import matplotlib.pyplot as plt
from numpy import linalg as LA
from sklearn.datasets import make_spd_matrix

K3_0=np.array(
    [
        [1, -1, 4],
        [1, 4, -2],
        [1, 4, 2]
    ]
)

K4_1=np.array(
    [
        [0.20, 0.60, 0.40, 0.80],
        [0.60, 1.80, 1.20, 2.40],
        [0.40, 1.20, 0.80, 1.60],
        [0.80, 2.40, 1.60, 3.20]
    ]
)

K4_2=np.array(
    [
  [2.3, 1.5, 0.8, 0.9],
  [1.5, 1.2, 0.7, 0.6],
  [0.8, 0.7, 0.5, 0.4],
  [0.9, 0.6, 0.4, 0.3]
    ]
)

K_0 = np.array([[-0.0050000,-0.0000000,-0.0000000],
                [-0.0000000,-10000.0045819,-29999.9987456],
                [-0.0000000,-29999.9987456,-90000.0012368]])

K_1 = np.array([[-200.0000100,0.0000000,0.0000000],
                [0.0000000,-180.0000100,60.0000000],
                [0.0000000,60.0000000,-20.0000100]])

K_2 = np.array([
[1, 1, 0, 1, 0, 1, 0, 1],
[1, 2, 1, 0, 1, 0, 1, 0],
[0, 1, 3, 1, 0, 1, 0, 1],
[1, 0, 1, 4, 1, 0, 1, 0],
[0, 1, 0, 1, 5, 1, 0, 1],
[1, 0, 1, 0, 1, 6, 1, 0],
[0, 1, 0, 1, 0, 1, 7, 1],
[1, 0, 1, 0, 1, 0, 1, 8] 
]
)

K_3=np.array([
[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000],
[0.0000000, 6694.0161133, -298.0833435, 0.0000000, 0.0000000 ,1343.7579346, -3399.7143555, 0.0000000],
[0.0000000, -298.0833435, 2417.6657715, 0.0000000, 0.0000000, 233.4712372, 686.2777710, 0.0000000],
[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000],
[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000],
[0.0000000, 1343.7579346, 233.4712372, 0.0000000, 0.0000000, 34531.0703125, -3785.7856445, 0.0000000],
[0.0000000, -3399.7143555, 686.2777710, 0.0000000, 0.0000000, -3785.7856445, 48357.3984375, 0.0000000],
[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000],
]
)

K_4=np.array([
[101105.3750000, -4151.5576172, 3730.3315430, -22321.6738281, 57831.6640625, -12261.6962891, -10529.3369141, -9797.6738281],
[-4151.5576172, 15331.9228516, 3638.2165527, 2688.6047363, 9314.1904297, -1828.3790283, 5672.0117188, -317.4915771],
[3730.3315430, 3638.2165527, 33748.2148438, -14399.9931641, -6357.6704102, 3437.7441406, 7549.2895508, -568.7544556],
[-22321.6738281, 2688.6047363, -14399.9931641, 97228.0156250, -24427.3359375, -3596.4404297, 14836.5156250, 6689.7988281],
[57831.6640625, 9314.1904297, -6357.6704102, -24427.3359375, 234944.4062500, -11384.6484375, -21269.4316406, 12129.8779297],
[-12261.6962891, -1828.3790283, 3437.7441406, -3596.4404297, -11384.6484375, 82422.0156250, 22680.9531250, 4392.9643555],
[-10529.3369141, 5672.0117188, 7549.2895508, 14836.5156250, -21269.4316406, 22680.9531250, 300814.8437500, 13805.1669922],
[-9797.6738281, -317.4915771, -568.7544556, 6689.7988281, 12129.8779297, 4392.9643555, 13805.1669922, 80841.8984375],
]
)


spdMatrix = np.array([
[0.5383, -0.1122,  0.0488, -0.0536 ,-0.1693 ,-0.1256,  0.1473 , 0.0271],
[-0.1122,  0.9896, -0.2489,  1.4111,  0.234 ,  0.9265, -1.4319, -0.0219],
[ 0.0488, -0.2489,  0.3871, -0.5646, -0.0614, -0.2454,  0.4036 , 0.1786],
[-0.0536,  1.4111, -0.5646,  3.0877,  0.337 ,  2.0379, -2.8062,  0.1213],
[-0.1693,  0.234,  -0.0614,  0.337 ,  0.403 ,  0.2985, -0.3864 ,-0.0544],
[-0.1256,  0.9265, -0.2454,  2.0379,  0.2985,  1.6729, -2.1262 , 0.2089],
[ 0.1473, -1.4319,  0.4036, -2.8062, -0.3864, -2.1262,  3.4411 ,-0.3976],
[ 0.0271, -0.0219,  0.1786,  0.1213, -0.0544,  0.2089 ,-0.3976,  0.4143] 
]
)

A = np.matmul(K_0,K_1)

#print(A)


# generating a postive definate matrix
#spd = make_spd_matrix(n_dim=8)
#np.set_printoptions(precision=4)
#print("sample spd")
#print(spd)

#w, v = LA.eig(spdMatrix)
# w, v = LA.eig(K_4)

# print("eigen values")
# print(w)
# print("eigen vectors")
# print(v)

# test determiant
print("correct det of matrix", np.linalg.det(K_0))
# qr of matrix
Q, R = np.linalg.qr(K_0)
print("Q")
print(Q)
print("R")
print(R)
print("det of Q", np.linalg.det(Q))
print("det of R")
detR=1.0
for i in range(0,K_0.shape[0]):
    detR=detR*R[i][i]
print(detR)

w, v = LA.eig(K_0)
detREigen=1.0
print("eigen shape", w.shape[0])
for i in range(0,w.shape[0]):
    detREigen=detREigen*w[i]
print("det based on eigen value", detREigen)


print("test K_2")
# test determiant
print("correct det of matrix", np.linalg.det(K_2))
# qr of matrix
Q, R = np.linalg.qr(K_2)
print("Q")
print(Q)
print("R")
print(R)
print("det of Q", np.linalg.det(Q))
print("det of R")
detR=1.0
for i in range(0,K_2.shape[0]):
    detR=detR*R[i][i]
print(detR)

w, v = LA.eig(K_2)
detREigen=1.0
print("eigen shape", w.shape[0])
for i in range(0,w.shape[0]):
    detREigen=detREigen*w[i]
print("det based on eigen value", detREigen)


# more tests
print("correct det of matrix K3_0", np.linalg.det(K3_0))
print("correct det of matrix K4_1", np.linalg.det(K4_1))
print("correct det of matrix K4_2", np.linalg.det(K4_2))
